# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1erqDMxcWcqL0jJNo054wH4vtTzmwSdRb
"""

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import cv2
import time

# Set page config
st.set_page_config(
    page_title="Maize Disease Classifier",
    page_icon="üåΩ",
    layout="wide"
)

# Load model (cache to avoid reloading)
@st.cache_resource
def load_model():
    interpreter = tf.lite.Interpreter(model_path='models/quantized_distilled_model.tflite')
    interpreter.allocate_tensors()
    return interpreter

# Image preprocessing
def preprocess_image(image):
    img = np.array(image)
    img = cv2.resize(img, (224, 224))
    img = img / 255.0  # Normalize
    img = np.expand_dims(img, axis=0).astype(np.float32)
    return img

# Class labels
CLASS_NAMES = ["Blight", "Common Rust", "Gray Leaf Spot", "Healthy"]

# Main app
def main():
    st.title("üåΩ Maize Disease Classifier")
    st.write("Upload an image of a maize leaf to detect diseases")

    # Sidebar
    st.sidebar.header("About")
    st.sidebar.info(
        "This app uses deep learning to classify maize leaf diseases. "
        "It can identify Blight, Common Rust, Gray Leaf Spot, and Healthy leaves."
    )

    # File uploader
    uploaded_file = st.file_uploader(
        "Choose a maize leaf image...",
        type=["jpg", "jpeg", "png"]
    )

    if uploaded_file is not None:
        # Display image
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        # Preprocess and predict
        with st.spinner("Analyzing..."):
            start_time = time.time()

            # Load model
            interpreter = load_model()
            input_details = interpreter.get_input_details()
            output_details = interpreter.get_output_details()

            # Preprocess
            img_array = preprocess_image(image)

            # Predict
            interpreter.set_tensor(input_details[0]['index'], img_array)
            interpreter.invoke()
            predictions = interpreter.get_tensor(output_details[0]['index'])

            # Get results
            predicted_class = CLASS_NAMES[np.argmax(predictions)]
            confidence = np.max(predictions) * 100
            inference_time = (time.time() - start_time) * 1000  # ms

        # Display results
        st.success(f"**Prediction:** {predicted_class}")
        st.info(f"**Confidence:** {confidence:.2f}%")
        st.write(f"**Inference time:** {inference_time:.2f}ms")

        # Show disease information
        if predicted_class != "Healthy":
            st.warning("‚ö†Ô∏è Disease Detected!")
            if predicted_class == "Blight":
                st.markdown("""
                **Recommended Treatment for Blight:**
                - Apply fungicides containing chlorothalonil or mancozeb
                - Remove and destroy infected plants
                - Practice crop rotation
                """)
            elif predicted_class == "Common Rust":
                st.markdown("""
                **Recommended Treatment for Common Rust:**
                - Use resistant varieties
                - Apply fungicides early in the season
                - Ensure proper plant spacing for air circulation
                """)
            elif predicted_class == "Gray Leaf Spot":
                st.markdown("""
                **Recommended Treatment for Gray Leaf Spot:**
                - Use fungicides with active ingredients like pyraclostrobin
                - Avoid overhead irrigation
                - Remove crop debris after harvest
                """)
        else:
            st.balloons()
            st.success("‚úÖ Healthy leaf detected!")

if __name__ == "__main__":
    main()

